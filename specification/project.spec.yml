openapi: 3.0.0
info:
  title: API сервер для демо-проекта «Шесть городов».
  description: Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
servers:
  - url: http://localhost
security:
  - ApiKeyAuth: []

tags:
  - name: users
    description: Действия с пользователем.
  - name: offers
    description: Действия с предложениями.
  - name: comments
    description: Действия с комментариями.

paths:
  /users:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      description: Создание нового пользователя. Создавать новых пользователей могут только анонимные клиенты. Email создаваемого пользователя уникален. В системе не может быть двух пользователей с одинаковым email.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
        required: true

      responses:
        201:
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        409:
          description: Не корректные данные или пользователь с таким email уже существует.

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение аватара должно быть в формате `png` или `jpg`.

      parameters:
        - name: userId
          in: path
          schema:
            type: string
          example: user-id-user-id
          required: true

      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: base64
      #              format: binary
      #          "image/jpeg":
      #            schema:
      #              type: string
      #              format: base64
      #              format: binary
      #          "image/png":
      #            schema:
      #              type: string
      #              format: base64
      #              format: binary

      responses:
        201:
          description: Аватар загружен. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        409:
          description: Не корректные данные

  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения
      description: Ресурс для аутентификации и авторизации пользователя

      requestBody:
        description: Информация авторизации пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authUser"
        required: true

      responses:
        201:
          description: Авторизация пройдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/token"
        403:
          description: Не верный логин или пароль или пользователь не существует

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      responses:
        201:
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        403:
          description: Пользователь не авторизован

  /users/logout:
    delete:
      tags:
        - users
      summary: Выход из закрытой части приложения
      description: Ресурс для завершения пользовательского сеанса

      responses:
        200:
          description: Пользовательский сеанс завершен
        404:
          description: Не найдено

  /offers:
    post:
      tags:
        - offers
      summary: Создание нового предложения
      description: Ресурс для создания новых предложений. Создавать предложения могут только авторизованные клиенты.

      requestBody:
        description: Информация для создания нового предложения.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOffer"
        required: true

      responses:
        201:
          description: Предложение добавлено. Объект предложения.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offer"
        409:
          description: Не корректные данные.

    get:
      tags:
        - offers
      summary: Список предложений
      description: Ресурс для получения списка предложений.

      parameters:
        - name: count
          in: query
          schema:
            type: integer

      responses:
        201:
          description: Предложение добавлено. Объект предложения.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"

  /offers/{offerId}:
    put:
      tags:
        - offers
      summary: Редактирование предложения
      description: Ресурс для редактирования предложения. Клиент может редактировать предложения по аренде, созданные им

      parameters:
        - name: offerId
          in: path
          schema:
            $ref: "#/components/schemas/offerId"
          required: true

      requestBody:
        description: Информация редактируемого предложения.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOffer"
        required: true

      responses:
        201:
          description: Предложение обновлено. Объект предложения.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offer"
        403:
          description: Доступ запрещен.
        409:
          description: Не корректные данные.

    delete:
      tags:
        - offers
      summary: Удадение предложения
      description: Ресурс для удаления предложения. Клиент может редактировать предложения по аренде, созданные им

      parameters:
        - name: offerId
          in: path
          schema:
            $ref: "#/components/schemas/offerId"
          required: true

      responses:
        200:
          description: Предложение удалено.
        403:
          description: Доступ запрещен.

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-token
      in: header

  schemas:
    userType:
      type: string
      enum:
        - Ordinary
        - Pro
      example: Pro

    userName:
      type: string
      example: Andrey

    userEmail:
      type: string
      example: andrey@test.ru

    userAvatarPath:
      type: string
      example: http://test.ru/1.jpg

    userPassword:
      type: string
      example: 123456

    user:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/userName"
        email:
          $ref: "#/components/schemas/userEmail"
        avatarPath:
          $ref: "#/components/schemas/userAvatarPath"
        type:
          $ref: "#/components/schemas/userType"

    createUser:
      type: object
      allOf:
        - $ref: "#/components/schemas/user"
      properties:
        password:
          $ref: "#/components/schemas/userPassword"

    authUser:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/userEmail"
        password:
          $ref: "#/components/schemas/userPassword"

    token:
      type: object
      properties:
        token:
          type: string
          example: qwewQWEQWEasdasdaASDADzxc

    localion:
      type: object
      properties:
        latitude:
          type: number
          example: 10.5
        longitude:
          type: number
          example: 11.5

    offerId:
      type: string
      example: offer-id-offer-id

    offerCityName:
      type: string
      example: Paris

    offerType:
      type: string
      enum:
        - apartment
        - house
        - room
        - hotel
      example: room

    baseOffer:
      type: object
      properties:
        title:
          type: string
          example: offer title
        description:
          type: string
          example: offer title
        publishDate:
          type: string
          example: "2024-07-09T11:24:14.495Z"
        city:
          type: object
          properties:
            name:
              $ref: "#/components/schemas/offerCityName"
            location:
              $ref: "#/components/schemas/localion"
        previewImage:
          type: string
          example: preview-img-4.jpg
        isPremium:
          type: boolean
          example: true
        type:
          $ref: "#/components/schemas/offerType"
        rooms:
          type: integer
          example: 2
        maxAdults:
          type: integer
          example: 4
        price:
          type: number
          example: 99.9
        goods:
          type: array
          items:
            type: string
          example:
            - Washer
            - Breakfast
        location:
          $ref: "#/components/schemas/localion"

    baseDetailOffer:
      type: object
      allOf:
        - $ref: "#/components/schemas/baseOffer"
      properties:
        images:
          type: array
          items:
            type: string
          example:
            - img-16.jpg
            - img-11.jpg

    createOffer:
      type: object
      allOf:
        - $ref: "#/components/schemas/baseDetailOffer"
      properties:
        city:
          $ref: "#/components/schemas/offerCityName"

    offer:
      type: object
      allOf:
        - $ref: "#/components/schemas/baseOffer"
      properties:
        isFavorite:
          type: boolean
          example: false
        rating:
          type: number
          example: 3.5
        reviewCount:
          type: integer
          example: 5

    detailOffer:
      type: object
      allOf:
        - $ref: "#/components/schemas/baseDetailOffer"
      properties:
        host:
          $ref: "#/components/schemas/user"
