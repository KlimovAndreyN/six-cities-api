openapi: 3.0.3
info:
  title: API сервер для демо-проекта «Шесть городов».
  description: Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
servers:
  - url: http://localhost
security:
  - ApiKeyAuth: []

tags:
  - name: users
    description: Действия с пользователем.
  - name: offers
    description: Действия с предложениями.
  - name: comments
    description: Действия с комментариями.

paths:
  /users:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      description: Создание нового пользователя. Создавать новых пользователей могут только анонимные клиенты. Email создаваемого пользователя уникален. В системе не может быть двух пользователей с одинаковым email.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
        required: true

      responses:
        201:
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        409:
          description: Не корректные данные или пользователь с таким email уже существует.

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение аватара должно быть в формате `png` или `jpg`.

      parameters:
        - name: userId
          in: path
          schema:
            type: string
          example: qweqweQWEQWqwewqe
          required: true

      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: base64
      #              format: binary
      #          "image/jpeg":
      #            schema:
      #              type: string
      #              format: base64
      #              format: binary
      #          "image/png":
      #            schema:
      #              type: string
      #              format: base64
      #              format: binary

      responses:
        201:
          description: Аватар загружен. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        409:
          description: Не корректные данные

  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения
      description: Ресурс для аутентификации и авторизации пользователя

      requestBody:
        description: Информация авторизации пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authUser"
        required: true

      responses:
        201:
          description: Авторизация пройдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/token"
        403:
          description: Не верный логин или пароль или пользователь не существует

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      responses:
        201:
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        403:
          description: Пользователь не авторизован

  /users/logout:
    delete:
      tags:
        - users
      summary: Выход из закрытой части приложения
      description: Ресурс для завершения пользовательского сеанса

      responses:
        200:
          description: Пользовательский сеанс завершен
        404:
          description: Не найдено

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-token
      in: header

  schemas:
    userType:
      type: string
      enum:
        - Ordinary
        - Pro
      example: Pro

    userName:
      type: string
      example: Andrey

    userEmail:
      type: string
      example: andrey@test.ru

    userAvatarPath:
      type: string
      example: http://test.ru/1.jpg

    userPassword:
      type: string
      example: 123456

    createUser:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/userName"
        email:
          $ref: "#/components/schemas/userEmail"
        avatarPath:
          $ref: "#/components/schemas/userAvatarPath"
        password:
          $ref: "#/components/schemas/userPassword"
        type:
          $ref: "#/components/schemas/userType"

    user:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/userName"
        email:
          $ref: "#/components/schemas/userEmail"
        avatarPath:
          $ref: "#/components/schemas/userAvatarPath"
        type:
          $ref: "#/components/schemas/userType"

    authUser:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/userEmail"
        password:
          $ref: "#/components/schemas/userPassword"

    token:
      type: object
      properties:
        token:
          type: string
          example: qwewQWEQWEasdasdaASDADzxc
